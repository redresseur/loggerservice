// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logger.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogMessageTag int32

const (
	LogMessageTag_COMMON   LogMessageTag = 0
	LogMessageTag_ACCIDENT LogMessageTag = 1
)

var LogMessageTag_name = map[int32]string{
	0: "COMMON",
	1: "ACCIDENT",
}

var LogMessageTag_value = map[string]int32{
	"COMMON":   0,
	"ACCIDENT": 1,
}

func (x LogMessageTag) String() string {
	return proto.EnumName(LogMessageTag_name, int32(x))
}

func (LogMessageTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d43b7bfc6b6f7b16, []int{0}
}

type LogMessageRequest struct {
	Version              float32       `protobuf:"fixed32,1,opt,name=version,proto3" json:"version,omitempty"`
	Tag                  LogMessageTag `protobuf:"varint,2,opt,name=tag,proto3,enum=v1.LogMessageTag" json:"tag,omitempty"`
	Message              string        `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LogMessageRequest) Reset()         { *m = LogMessageRequest{} }
func (m *LogMessageRequest) String() string { return proto.CompactTextString(m) }
func (*LogMessageRequest) ProtoMessage()    {}
func (*LogMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d43b7bfc6b6f7b16, []int{0}
}

func (m *LogMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogMessageRequest.Unmarshal(m, b)
}
func (m *LogMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogMessageRequest.Marshal(b, m, deterministic)
}
func (m *LogMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMessageRequest.Merge(m, src)
}
func (m *LogMessageRequest) XXX_Size() int {
	return xxx_messageInfo_LogMessageRequest.Size(m)
}
func (m *LogMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogMessageRequest proto.InternalMessageInfo

func (m *LogMessageRequest) GetVersion() float32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *LogMessageRequest) GetTag() LogMessageTag {
	if m != nil {
		return m.Tag
	}
	return LogMessageTag_COMMON
}

func (m *LogMessageRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LogMessageReply struct {
	Version              float32  `protobuf:"fixed32,1,opt,name=version,proto3" json:"version,omitempty"`
	Status               int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogMessageReply) Reset()         { *m = LogMessageReply{} }
func (m *LogMessageReply) String() string { return proto.CompactTextString(m) }
func (*LogMessageReply) ProtoMessage()    {}
func (*LogMessageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d43b7bfc6b6f7b16, []int{1}
}

func (m *LogMessageReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogMessageReply.Unmarshal(m, b)
}
func (m *LogMessageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogMessageReply.Marshal(b, m, deterministic)
}
func (m *LogMessageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMessageReply.Merge(m, src)
}
func (m *LogMessageReply) XXX_Size() int {
	return xxx_messageInfo_LogMessageReply.Size(m)
}
func (m *LogMessageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMessageReply.DiscardUnknown(m)
}

var xxx_messageInfo_LogMessageReply proto.InternalMessageInfo

func (m *LogMessageReply) GetVersion() float32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *LogMessageReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *LogMessageReply) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterEnum("v1.LogMessageTag", LogMessageTag_name, LogMessageTag_value)
	proto.RegisterType((*LogMessageRequest)(nil), "v1.LogMessageRequest")
	proto.RegisterType((*LogMessageReply)(nil), "v1.LogMessageReply")
}

func init() { proto.RegisterFile("logger.proto", fileDescriptor_d43b7bfc6b6f7b16) }

var fileDescriptor_d43b7bfc6b6f7b16 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xc9, 0x4f, 0x4f,
	0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x33, 0x54, 0xca, 0xe1, 0x12,
	0xf4, 0xc9, 0x4f, 0xf7, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x11, 0x92, 0xe0, 0x62, 0x2f, 0x4b, 0x2d, 0x2a, 0xce, 0xcc, 0xcf, 0x93, 0x60, 0x54, 0x60,
	0xd4, 0x60, 0x0a, 0x82, 0x71, 0x85, 0x94, 0xb9, 0x98, 0x4b, 0x12, 0xd3, 0x25, 0x98, 0x14, 0x18,
	0x35, 0xf8, 0x8c, 0x04, 0xf5, 0xca, 0x0c, 0xf5, 0x10, 0xba, 0x43, 0x12, 0xd3, 0x83, 0x40, 0xb2,
	0x20, 0xed, 0xb9, 0x10, 0x21, 0x09, 0x66, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0x57, 0x29, 0x96,
	0x8b, 0x1f, 0xd9, 0xb6, 0x82, 0x9c, 0x4a, 0x3c, 0x76, 0x89, 0x71, 0xb1, 0x15, 0x97, 0x24, 0x96,
	0x94, 0x16, 0x83, 0xad, 0x63, 0x0d, 0x82, 0xf2, 0x40, 0x3a, 0x0a, 0x12, 0x2b, 0x73, 0xf2, 0x13,
	0x53, 0xc0, 0xc6, 0xf3, 0x04, 0xc1, 0xb8, 0x5a, 0x9a, 0x5c, 0xbc, 0x28, 0xce, 0x11, 0xe2, 0xe2,
	0x62, 0x73, 0xf6, 0xf7, 0xf5, 0xf5, 0xf7, 0x13, 0x60, 0x10, 0xe2, 0xe1, 0xe2, 0x70, 0x74, 0x76,
	0xf6, 0x74, 0x71, 0xf5, 0x0b, 0x11, 0x60, 0x34, 0x72, 0xe0, 0x62, 0xf3, 0x01, 0x87, 0x85, 0x90,
	0x19, 0x17, 0x9b, 0x73, 0x7e, 0x6e, 0x6e, 0x66, 0x89, 0x90, 0x28, 0xaa, 0x7f, 0xa0, 0xa1, 0x21,
	0x25, 0x8c, 0x2e, 0x5c, 0x90, 0x53, 0xa9, 0xc4, 0x90, 0xc4, 0x06, 0x0e, 0x44, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x7c, 0x2e, 0x5d, 0x2a, 0x54, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggerClient interface {
	Commit(ctx context.Context, in *LogMessageRequest, opts ...grpc.CallOption) (*LogMessageReply, error)
}

type loggerClient struct {
	cc *grpc.ClientConn
}

func NewLoggerClient(cc *grpc.ClientConn) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) Commit(ctx context.Context, in *LogMessageRequest, opts ...grpc.CallOption) (*LogMessageReply, error) {
	out := new(LogMessageReply)
	err := c.cc.Invoke(ctx, "/v1.Logger/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServer is the server API for Logger service.
type LoggerServer interface {
	Commit(context.Context, *LogMessageRequest) (*LogMessageReply, error)
}

// UnimplementedLoggerServer can be embedded to have forward compatible implementations.
type UnimplementedLoggerServer struct {
}

func (*UnimplementedLoggerServer) Commit(ctx context.Context, req *LogMessageRequest) (*LogMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Logger/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).Commit(ctx, req.(*LogMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Commit",
			Handler:    _Logger_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logger.proto",
}
