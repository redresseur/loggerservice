// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logger.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogMessageTag int32

const (
	LogMessageTag_COMMON   LogMessageTag = 0
	LogMessageTag_ACCIDENT LogMessageTag = 1
)

var LogMessageTag_name = map[int32]string{
	0: "COMMON",
	1: "ACCIDENT",
}

var LogMessageTag_value = map[string]int32{
	"COMMON":   0,
	"ACCIDENT": 1,
}

func (x LogMessageTag) String() string {
	return proto.EnumName(LogMessageTag_name, int32(x))
}

func (LogMessageTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d43b7bfc6b6f7b16, []int{0}
}

type Message struct {
	Version              float32       `protobuf:"fixed32,1,opt,name=version,proto3" json:"version,omitempty"`
	Tag                  LogMessageTag `protobuf:"varint,2,opt,name=tag,proto3,enum=v1.LogMessageTag" json:"tag,omitempty"`
	LoggerId             string        `protobuf:"bytes,3,opt,name=logger_id,json=loggerId,proto3" json:"logger_id,omitempty"`
	Message              []byte        `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_d43b7bfc6b6f7b16, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetVersion() float32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Message) GetTag() LogMessageTag {
	if m != nil {
		return m.Tag
	}
	return LogMessageTag_COMMON
}

func (m *Message) GetLoggerId() string {
	if m != nil {
		return m.LoggerId
	}
	return ""
}

func (m *Message) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type RegistryRespond struct {
	Version              float32  `protobuf:"fixed32,1,opt,name=version,proto3" json:"version,omitempty"`
	LoggerId             string   `protobuf:"bytes,3,opt,name=logger_id,json=loggerId,proto3" json:"logger_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistryRespond) Reset()         { *m = RegistryRespond{} }
func (m *RegistryRespond) String() string { return proto.CompactTextString(m) }
func (*RegistryRespond) ProtoMessage()    {}
func (*RegistryRespond) Descriptor() ([]byte, []int) {
	return fileDescriptor_d43b7bfc6b6f7b16, []int{1}
}

func (m *RegistryRespond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistryRespond.Unmarshal(m, b)
}
func (m *RegistryRespond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistryRespond.Marshal(b, m, deterministic)
}
func (m *RegistryRespond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryRespond.Merge(m, src)
}
func (m *RegistryRespond) XXX_Size() int {
	return xxx_messageInfo_RegistryRespond.Size(m)
}
func (m *RegistryRespond) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryRespond.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryRespond proto.InternalMessageInfo

func (m *RegistryRespond) GetVersion() float32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RegistryRespond) GetLoggerId() string {
	if m != nil {
		return m.LoggerId
	}
	return ""
}

type ClientInfo struct {
	Version              float32  `protobuf:"fixed32,1,opt,name=version,proto3" json:"version,omitempty"`
	ClientId             string   `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientInfo) Reset()         { *m = ClientInfo{} }
func (m *ClientInfo) String() string { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()    {}
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d43b7bfc6b6f7b16, []int{2}
}

func (m *ClientInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientInfo.Unmarshal(m, b)
}
func (m *ClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientInfo.Marshal(b, m, deterministic)
}
func (m *ClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientInfo.Merge(m, src)
}
func (m *ClientInfo) XXX_Size() int {
	return xxx_messageInfo_ClientInfo.Size(m)
}
func (m *ClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientInfo proto.InternalMessageInfo

func (m *ClientInfo) GetVersion() float32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ClientInfo) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type Respond struct {
	Version              float32  `protobuf:"fixed32,1,opt,name=version,proto3" json:"version,omitempty"`
	Status               int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Respond) Reset()         { *m = Respond{} }
func (m *Respond) String() string { return proto.CompactTextString(m) }
func (*Respond) ProtoMessage()    {}
func (*Respond) Descriptor() ([]byte, []int) {
	return fileDescriptor_d43b7bfc6b6f7b16, []int{3}
}

func (m *Respond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Respond.Unmarshal(m, b)
}
func (m *Respond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Respond.Marshal(b, m, deterministic)
}
func (m *Respond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Respond.Merge(m, src)
}
func (m *Respond) XXX_Size() int {
	return xxx_messageInfo_Respond.Size(m)
}
func (m *Respond) XXX_DiscardUnknown() {
	xxx_messageInfo_Respond.DiscardUnknown(m)
}

var xxx_messageInfo_Respond proto.InternalMessageInfo

func (m *Respond) GetVersion() float32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Respond) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Respond) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterEnum("v1.LogMessageTag", LogMessageTag_name, LogMessageTag_value)
	proto.RegisterType((*Message)(nil), "v1.Message")
	proto.RegisterType((*RegistryRespond)(nil), "v1.RegistryRespond")
	proto.RegisterType((*ClientInfo)(nil), "v1.ClientInfo")
	proto.RegisterType((*Respond)(nil), "v1.Respond")
}

func init() { proto.RegisterFile("logger.proto", fileDescriptor_d43b7bfc6b6f7b16) }

var fileDescriptor_d43b7bfc6b6f7b16 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0x4f, 0x4b, 0xfb, 0x40,
	0x14, 0xec, 0xa6, 0xbf, 0x5f, 0x9a, 0x3e, 0x63, 0xad, 0x7b, 0x90, 0xa0, 0x97, 0x10, 0x3d, 0xa4,
	0x1e, 0x0a, 0xad, 0x9f, 0x40, 0x56, 0xc1, 0x40, 0xff, 0xc0, 0x52, 0xbd, 0x78, 0x90, 0xd5, 0xac,
	0x4b, 0xa0, 0xc9, 0x86, 0xec, 0x1a, 0xe8, 0xc9, 0xaf, 0x2e, 0x9b, 0x4d, 0x10, 0x3d, 0xc4, 0xe3,
	0xec, 0x9b, 0x99, 0x37, 0x6f, 0x16, 0xfc, 0xbd, 0x14, 0x82, 0x57, 0xf3, 0xb2, 0x92, 0x5a, 0x62,
	0xa7, 0x5e, 0x44, 0x9f, 0x30, 0x5a, 0x73, 0xa5, 0x98, 0xe0, 0x38, 0x80, 0x51, 0xcd, 0x2b, 0x95,
	0xc9, 0x22, 0x40, 0x21, 0x8a, 0x1d, 0xda, 0x41, 0x7c, 0x09, 0x43, 0xcd, 0x44, 0xe0, 0x84, 0x28,
	0x9e, 0x2c, 0x4f, 0xe7, 0xf5, 0x62, 0xbe, 0x92, 0xa2, 0x95, 0xed, 0x98, 0xa0, 0x66, 0x8a, 0x2f,
	0x60, 0x6c, 0xdd, 0x5f, 0xb2, 0x34, 0x18, 0x86, 0x28, 0x1e, 0x53, 0xcf, 0x3e, 0x24, 0xa9, 0xf1,
	0xce, 0x2d, 0x3f, 0xf8, 0x17, 0xa2, 0xd8, 0xa7, 0x1d, 0x8c, 0x1e, 0xe0, 0x84, 0x72, 0x91, 0x29,
	0x5d, 0x1d, 0x28, 0x57, 0xa5, 0x2c, 0xd2, 0x9e, 0x20, 0x7d, 0x3b, 0x22, 0x02, 0x40, 0xf6, 0x19,
	0x2f, 0x74, 0x52, 0xbc, 0xcb, 0x7e, 0x93, 0xb7, 0x86, 0x67, 0x4c, 0x1c, 0x6b, 0x62, 0x1f, 0x92,
	0x34, 0x7a, 0x84, 0xd1, 0xdf, 0x31, 0xce, 0xc0, 0x55, 0x9a, 0xe9, 0x0f, 0xd5, 0xc8, 0xff, 0xd3,
	0x16, 0x19, 0x45, 0xc9, 0x0e, 0x7b, 0xc9, 0x6c, 0x38, 0x9f, 0x76, 0xf0, 0x7a, 0x06, 0xc7, 0x3f,
	0x2a, 0xc3, 0x00, 0x2e, 0xd9, 0xae, 0xd7, 0xdb, 0xcd, 0x74, 0x80, 0x7d, 0xf0, 0x6e, 0x09, 0x49,
	0xee, 0xee, 0x37, 0xbb, 0x29, 0x5a, 0x3e, 0x83, 0xb7, 0x6a, 0x4e, 0x7a, 0x5a, 0xe0, 0x19, 0x78,
	0x5d, 0x39, 0x78, 0x62, 0x7a, 0xff, 0x3e, 0xf0, 0xfc, 0xc8, 0xe0, 0x36, 0x6b, 0x34, 0xc0, 0x57,
	0xe0, 0x12, 0x99, 0xe7, 0x99, 0xc6, 0xcd, 0xa0, 0x5d, 0xf5, 0x8b, 0xf5, 0xea, 0x36, 0x3f, 0x7f,
	0xf3, 0x15, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x0f, 0xc9, 0xb8, 0x09, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoggerV1Client is the client API for LoggerV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggerV1Client interface {
	Registry(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Respond, error)
	Commit(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Respond, error)
}

type loggerV1Client struct {
	cc *grpc.ClientConn
}

func NewLoggerV1Client(cc *grpc.ClientConn) LoggerV1Client {
	return &loggerV1Client{cc}
}

func (c *loggerV1Client) Registry(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Respond, error) {
	out := new(Respond)
	err := c.cc.Invoke(ctx, "/v1.LoggerV1/Registry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerV1Client) Commit(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Respond, error) {
	out := new(Respond)
	err := c.cc.Invoke(ctx, "/v1.LoggerV1/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerV1Server is the server API for LoggerV1 service.
type LoggerV1Server interface {
	Registry(context.Context, *ClientInfo) (*Respond, error)
	Commit(context.Context, *Message) (*Respond, error)
}

// UnimplementedLoggerV1Server can be embedded to have forward compatible implementations.
type UnimplementedLoggerV1Server struct {
}

func (*UnimplementedLoggerV1Server) Registry(ctx context.Context, req *ClientInfo) (*Respond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registry not implemented")
}
func (*UnimplementedLoggerV1Server) Commit(ctx context.Context, req *Message) (*Respond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}

func RegisterLoggerV1Server(s *grpc.Server, srv LoggerV1Server) {
	s.RegisterService(&_LoggerV1_serviceDesc, srv)
}

func _LoggerV1_Registry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerV1Server).Registry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LoggerV1/Registry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerV1Server).Registry(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggerV1_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerV1Server).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LoggerV1/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerV1Server).Commit(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoggerV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.LoggerV1",
	HandlerType: (*LoggerV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registry",
			Handler:    _LoggerV1_Registry_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _LoggerV1_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logger.proto",
}
