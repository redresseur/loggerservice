// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 当客户端新接入时要与服务端进行协议磋商
// 根据当前服务端的支持的版本，最终决定使用哪个版进行通信
type ProtocolRequest struct {
	SupportProtocol []float32 `protobuf:"fixed32,1,rep,packed,name=support_protocol,json=supportProtocol,proto3" json:"support_protocol,omitempty"`
	// 其他
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtocolRequest) Reset()         { *m = ProtocolRequest{} }
func (m *ProtocolRequest) String() string { return proto.CompactTextString(m) }
func (*ProtocolRequest) ProtoMessage()    {}
func (*ProtocolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{0}
}

func (m *ProtocolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolRequest.Unmarshal(m, b)
}
func (m *ProtocolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolRequest.Marshal(b, m, deterministic)
}
func (m *ProtocolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolRequest.Merge(m, src)
}
func (m *ProtocolRequest) XXX_Size() int {
	return xxx_messageInfo_ProtocolRequest.Size(m)
}
func (m *ProtocolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolRequest proto.InternalMessageInfo

func (m *ProtocolRequest) GetSupportProtocol() []float32 {
	if m != nil {
		return m.SupportProtocol
	}
	return nil
}

func (m *ProtocolRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ProtocolRespond struct {
	SupportProtocol []float32 `protobuf:"fixed32,1,rep,packed,name=support_protocol,json=supportProtocol,proto3" json:"support_protocol,omitempty"`
	// 其他
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtocolRespond) Reset()         { *m = ProtocolRespond{} }
func (m *ProtocolRespond) String() string { return proto.CompactTextString(m) }
func (*ProtocolRespond) ProtoMessage()    {}
func (*ProtocolRespond) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{1}
}

func (m *ProtocolRespond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolRespond.Unmarshal(m, b)
}
func (m *ProtocolRespond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolRespond.Marshal(b, m, deterministic)
}
func (m *ProtocolRespond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolRespond.Merge(m, src)
}
func (m *ProtocolRespond) XXX_Size() int {
	return xxx_messageInfo_ProtocolRespond.Size(m)
}
func (m *ProtocolRespond) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolRespond.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolRespond proto.InternalMessageInfo

func (m *ProtocolRespond) GetSupportProtocol() []float32 {
	if m != nil {
		return m.SupportProtocol
	}
	return nil
}

func (m *ProtocolRespond) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*ProtocolRequest)(nil), "protocol.ProtocolRequest")
	proto.RegisterType((*ProtocolRespond)(nil), "protocol.ProtocolRespond")
}

func init() { proto.RegisterFile("protocol.proto", fileDescriptor_2bc2336598a3f7e0) }

var fileDescriptor_2bc2336598a3f7e0 = []byte{
	// 155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x03, 0x33, 0x84, 0x38, 0x60, 0x7c, 0xa5, 0x30, 0x2e, 0xfe, 0x00,
	0x28, 0x3b, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x93, 0x4b, 0xa0, 0xb8, 0xb4, 0xa0,
	0x20, 0xbf, 0xa8, 0x24, 0x1e, 0xa6, 0x4c, 0x82, 0x51, 0x81, 0x59, 0x83, 0x29, 0x88, 0x1f, 0x2a,
	0x0e, 0xd3, 0x21, 0x24, 0xc1, 0xc5, 0x5e, 0x90, 0x58, 0x99, 0x93, 0x9f, 0x98, 0x22, 0xc1, 0xa4,
	0xc0, 0xa8, 0xc1, 0x13, 0x04, 0xe3, 0xa2, 0x9a, 0x5b, 0x5c, 0x90, 0x9f, 0x97, 0x42, 0x15, 0x73,
	0x8d, 0x42, 0xb9, 0xd8, 0x7c, 0xf2, 0xd3, 0xd3, 0x53, 0x8b, 0x84, 0xbc, 0xb9, 0x04, 0xdd, 0x52,
	0x4b, 0x92, 0x33, 0x60, 0x9a, 0x3c, 0xf3, 0xd2, 0xf2, 0x85, 0x24, 0xf5, 0xe0, 0x3e, 0x45, 0xf3,
	0x96, 0x14, 0x56, 0x29, 0xb0, 0xcb, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0x72, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xb3, 0xa5, 0x87, 0x79, 0x29, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggerClient interface {
	FetchProtocolInfo(ctx context.Context, in *ProtocolRequest, opts ...grpc.CallOption) (*ProtocolRespond, error)
}

type loggerClient struct {
	cc *grpc.ClientConn
}

func NewLoggerClient(cc *grpc.ClientConn) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) FetchProtocolInfo(ctx context.Context, in *ProtocolRequest, opts ...grpc.CallOption) (*ProtocolRespond, error) {
	out := new(ProtocolRespond)
	err := c.cc.Invoke(ctx, "/protocol.Logger/FetchProtocolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServer is the server API for Logger service.
type LoggerServer interface {
	FetchProtocolInfo(context.Context, *ProtocolRequest) (*ProtocolRespond, error)
}

// UnimplementedLoggerServer can be embedded to have forward compatible implementations.
type UnimplementedLoggerServer struct {
}

func (*UnimplementedLoggerServer) FetchProtocolInfo(ctx context.Context, req *ProtocolRequest) (*ProtocolRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchProtocolInfo not implemented")
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_FetchProtocolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).FetchProtocolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Logger/FetchProtocolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).FetchProtocolInfo(ctx, req.(*ProtocolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchProtocolInfo",
			Handler:    _Logger_FetchProtocolInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}
